#Create timeout binomial variable.
df_train$TimeOut=ifelse(df_train$SuccFail=="Succ",0,1)
df_train$TimeOut=as.factor(df_train$TimeOut)
#Create variable where a timeout is treated as the timelimit rather than NA.
df_train$TimeToPeck_TimeLimit = ifelse(is.na(df_train$TimeToPeck), df_train$timeOutTime, df_train$TimeToPeck)
df_train$TimeToPeck_TimeLimit
#Rename InOut to DotType.
df_train$DotType = df_train$InOut
##ii) Experiment Data----
#'''''''''''''''''''
#Loads and adjusts the dataset
#read data
df = read.csv('WT_Data_Exp.csv')
#remove excluded trials
df = df[df$Exclude==0,] #this keeps only the rows where exclude is 0
#make TOC a factor (categorical variable) instead of an integer
df$TOC = factor(df$TOC)
#create a variable that denotes each unique trial for each bird
#(so we can account for which in/out dots were presented together)
df$TrialNumber = floor(df$Number)
df$TrialID = paste0(df$BirdID, '_', floor(df$Number))
df$TrialID2 = paste0(df$BirdID, '_',(df$Number))
#TimeOut Binomial
df$TimeOut=ifelse(df$SuccFail=="Succ",0,1)
df$TimeOut=as.factor(df$TimeOut)
#Reverse factor levels
df$shownWindImage=factor(df$shownWindImage)
df$shownWindImage <- factor(df$shownWindImage, levels = rev(levels(df$shownWindImage)))
df$trainWindImage=factor(df$trainWindImage)
df$trainWindImage <- factor(df$trainWindImage, levels = rev(levels(df$trainWindImage)))
df$TimeToPeck = as.numeric(df$TimeToPeck)
#Create variable where a timeout is treated as the timelimit rather than NA.
df$TimeToPeck_TimeLimit = ifelse(is.na(df$TimeToPeck), df$timeOutTime, df$TimeToPeck)
df$TimeToPeck_TimeLimit
# Create Block Number variable
df$BlockNumber = df$Group
#Patterned
df$Patterned = ifelse(df$shownWindImage=="White","Un-Patterned","Patterned")
# CHECK -----
#.................................
# Confirm the number of birds
# Number of birds
length(unique(df$BirdID)) #22 birds total
t=subset(df,trainWindImage=="White")
length(unique(t$BirdID)) # 5 birds were trained with white
t=subset(df,trainWindImage=="Red")
length(unique(t$BirdID))  # 5 birds were trained with red
t=subset(df,trainWindImage=="Black")
length(unique(t$BirdID)) # 6 birds were trained with black
t=subset(df,trainWindImage=="Bio")
length(unique(t$BirdID)) # 6  birds were trained with bio
# ANALYSES -----
#.................................
## Scale Data -----
##'''''''''''''''''''
###i) Training Data ----
df_train$Log_TimeToPeck = log( df_train$TimeToPeck)
df_train$FactorSpeed = as.factor(df_train$Speed)
df_train$Log_Number = log(df_train$Number)
df_train_sub = subset(df_train,Number<=10)
tS = subset(df_train_sub,TimeOut=="1")
tS
df_train_sub = subset(df_train_sub,TimeToPeck>0.3)
df_train_sub = rbind(df_train_sub,tS)
df_scaled_train <-df_train_sub %>%
mutate(across(where(is.numeric), scale))
###ii) Comparative Data ----
df$Log_TimeToPeck = log( df$TimeToPeck)
df$Log_TimeToPeck_TimeLimit = log( df$TimeToPeck_TimeLimit)
df$TrialID
df_scaled <-df %>%
mutate(across(where(is.numeric), scale))
##1) Training Analysis -----
##'''''''''''''''''''''''
###i) Train Timeouts ----
###~~~~~~~~~~~~~~~~~~~~
####.Percentage of Failures ----
nrow(subset(df_scaled_train,TimeOut=="1"))/nrow(df_scaled_train)*100
#Only 10%
####.Base Models ----
test_base_model1 <- glmer(TimeOut ~trainWindImage*FactorSpeed*Number*DotType+(1|BirdID), data=subset(df_scaled_train), family=binomial)
summary(test_base_model1)
#Models fail to converge!
test_base_model2 <- glmer(TimeOut ~trainWindImage+FactorSpeed+Number+DotType+(1|BirdID), data=subset(df_scaled_train), family=binomial)
summary(test_base_model2)
#Model converged!
#Base model is defined as
base_model <- glmer(TimeOut ~ trainWindImage+FactorSpeed+Number+DotType+(1|BirdID), data=subset(df_scaled_train), family=binomial)
summary(base_model)
summary(base_model)
qqPlot(residuals(base_model))
hist(residuals(base_model))
####.Likelihood Ratio Tests ----
mod_null1 <- glmer(TimeOut ~ FactorSpeed+Number+DotType+(1|BirdID), data=subset(df_scaled_train), family=binomial)
mod_null2 <- glmer(TimeOut ~ trainWindImage+Number+DotType+(1|BirdID), data=subset(df_scaled_train), family=binomial)
mod_null3 <- glmer(TimeOut ~ trainWindImage+FactorSpeed+DotType+(1|BirdID), data=subset(df_scaled_train), family=binomial)
mod_null4 <- glmer(TimeOut ~ trainWindImage+FactorSpeed+Number+(1|BirdID), data=subset(df_scaled_train), family=binomial)
print("null_1")
anova(base_model, mod_null1)  # Train image is not significant
print("null_2")
anova(base_model, mod_null2)  # Speed is significant
print("null_3")
anova(base_model, mod_null3)  # Number is significant
print("null_4")
anova(base_model, mod_null4)  # DotType is not significant
####.Reduced model ----
reduced_model <-  glmer(TimeOut ~FactorSpeed+Number+(1|BirdID), data=subset(df_scaled_train), family=binomial)
summary(reduced_model)
qqPlot(residuals(reduced_model))
hist(residuals(reduced_model))
# Post-hoc comparisons for FactorSpeed
emmeans(reduced_model, pairwise ~ FactorSpeed, adjust = "tukey")
###ii) Train Capture Time ----
###~~~~~~~~~~~~~~~~~~~~
####. Base model----
# Base model is the model with all variables.
# TimeToPeck = Capture time
base_model <- lmer(Log_TimeToPeck ~trainWindImage+FactorSpeed+Number+DotType+(1|BirdID), data=subset(df_scaled_train ))
summary(base_model)
qqPlot(residuals(base_model))
hist(residuals(base_model))
####. Likelihood ratio test ----
#Single Variable deletion
mod_null1 <- lmer(Log_TimeToPeck ~FactorSpeed+Number+DotType+(1|BirdID), data=subset(df_scaled_train))
mod_null2 <- lmer(Log_TimeToPeck ~trainWindImage+Number+DotType+(1|BirdID), data=subset(df_scaled_train))
mod_null3 <- lmer(Log_TimeToPeck ~trainWindImage+FactorSpeed+DotType+(1|BirdID), data=subset(df_scaled_train))
mod_null4 <- lmer(Log_TimeToPeck ~trainWindImage+FactorSpeed+Number+(1|BirdID), data=subset(df_scaled_train))
print("null_1")
anova(base_model, mod_null1)  # Wind turbine type is not significant
print("null_2")
anova(base_model, mod_null2)  # Speed is significant
print("null_3")
anova(base_model, mod_null3)  # Trial Number is significant
print("null_4")
anova(base_model, mod_null4)  # DotType is signficiant!
####. Reduced model ----
reduced_model <- lmer(Log_TimeToPeck ~FactorSpeed+DotType+Number+(1|BirdID), data=subset(df_scaled_train ))
summary(reduced_model)
qqPlot(residuals(reduced_model))
hist(residuals(reduced_model))
emmeans(reduced_model, pairwise ~ FactorSpeed, adjust = "tukey")
####. Figure 2 A ----
p <- ggplot(subset(df_train_sub ), aes(x=Number, y=TimeToPeck, col=DotType)) +
geom_smooth (aes(),method=glm,formula=y~poly(x,1),alpha=0.15,size=0.75)+
facet_grid(. ~ as.factor(Speed))+
# Labels
labs(title = "",
x = "Trial Number",
y = "Log Time to Peck",
color = "Blade Type") # Specify the color palette
p + theme_classic() +
theme(legend.position = "none",  # Hide legend
text = element_text(size = 12),
line = element_line(size=0.6),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),  # Adjust y-axis title margin
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)))  # Adjust x-axis title margin
# Create the plot
p <- ggplot(df_train_sub, aes(x = FactorSpeed, y = TimeToPeck,
group = FactorSpeed)) +
# Stats
stat_summary(fun.data = mean_se, geom = "errorbar", aes(),
width = 0.3,size=1, position = position_dodge(width = 0.3)) +  # Dodge error bars
stat_summary(fun = mean, geom = "point", aes(), size = 4, shape = 21, fill="black",
position = position_dodge(width = 0.3)) +  # Dodge mean points
# Labels and plot customization
labs(title = "",
x = "Wind Turbine Speed (rpm)",
y = "Time to Peck (Seconds)",
color = "Blade Type") +
# Add significance comparisons
geom_signif(
comparisons = list(c("2.5", "0"), c("2.5", "5"), c("0", "5"),
c("5", "10"),c("2.5", "10"), c("0", "10")),
annotations = c("***","***","ns","ns","***","ns"),  # Significance codes
y_position = c(19,22,25,28,31,34),  # Dynamic y-position
textsize = 4,
vjust = 0,
hjust=0.2,
tip_length = c(0.01, 0.01,0.01,0.01,0.01,0.01),
map_signif_level = TRUE  # Automatically map significance levels to symbols
) +
# Custom color scales
scale_alpha_manual(values = c(1, 0.25)) +
scale_fill_manual(values = my_colors) +
scale_color_manual(values = my_colors) +
# Adjust the y-axis to add more space between the bars
scale_y_continuous(expand = expansion(mult = c(0.05, 0.2))) +  # More space at the top
theme_classic() +
theme(legend.position = "none",  # Hide legend
text = element_text(size = 12),
line = element_line(size = 0.6),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)))
# Display the plot
print(p)
# Create the plot
p <- ggplot(df_train_sub, aes(x = DotType, y = TimeToPeck
)) +
# Stats
stat_summary(fun.data = mean_se, geom = "errorbar", aes(color = DotType, fill=DotType),
width = 0.3,size=1, position = position_dodge(width = 0.3)) +  # Dodge error bars
stat_summary(fun = mean, geom = "point", aes(color = DotType, fill=DotType), size = 4, shape = 21,
position = position_dodge(width = 0.3)) +  # Dodge mean points
# Labels and plot customization
labs(title = "",
x = "Dot Type (in/out)",
y = "Time to Peck (Seconds)",
color = "Blade Type") +
# Add significance comparisons
geom_signif(
comparisons = list(c("in", "out")),
annotations = c("**"),  # Significance codes
y_position = c(17),  # Dynamic y-position
textsize = 4,
vjust = 0,
hjust=0.2,
tip_length = c(0.01),
map_signif_level = TRUE  # Automatically map significance levels to symbols
) +
# Custom color scales
scale_alpha_manual(values = c(1, 0.25)) +
# Adjust the y-axis to add more space between the bars
scale_y_continuous(expand = expansion(mult = c(0.05, 0.2))) +  # More space at the top
theme_classic() +
theme(legend.position = "none",  # Hide legend
text = element_text(size = 12),
line = element_line(size = 0.6),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)))
# Display the plot
print(p)
##2) Comparative Exp Analysis -----
##'''''''''''''''''''''''''''''''''''
###i) Comp Timeouts ----
###~~~~~~~~~~~~~~~~~~~~
####. Percentage Timeouts----
#WHITE BLADES
T = subset(df_scaled,shownWindImage=="White")
nrow(subset(T,TimeOut=="1" ))/nrow(T)*100
#4.19
#RED BLADES
T = subset(df_scaled,shownWindImage=="Red")
nrow(subset(T,TimeOut=="1" ))/nrow(T)*100
#13.42
#BLACK BLADES
T = subset(df_scaled,shownWindImage=="Black")
nrow(subset(T,TimeOut=="1" ))/nrow(T)*100
#10.45
#BIO BLADES
T = subset(df_scaled,shownWindImage=="Bio")
nrow(subset(T,TimeOut=="1" ))/nrow(T)*100
#39.53488
####. Base models ----
# complex model failure
test_mod1 <- glmer(TimeOut ~shownWindImage*NovelBlade*TrialNumber+(1|BirdID)+(1|TrialID), data=subset(df_scaled), family=binomial)
summary(test_mod1)
# Model failed to converge!
# Simplify by removing interactions.
test_mod2 <- glmer(TimeOut ~shownWindImage+NovelBlade+TrialNumber+(1|BirdID)+(1|TrialID), data=subset(df_scaled), family=binomial)
p <- ggplot(subset(df_train_sub ), aes(x=Number, y=TimeToPeck, col=DotType)) +
geom_smooth (aes(),method=glm,formula=y~poly(x,1),alpha=0.15,size=0.75)+
facet_grid(. ~ as.factor(Speed))+
# Labels
labs(title = "",
x = "Trial Number",
y = "Log Time to Peck",
color = "Blade Type") # Specify the color palette
p + theme_classic() +
theme(legend.position = "none",  # Hide legend
text = element_text(size = 12),
line = element_line(size=0.6),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),  # Adjust y-axis title margin
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)))  # Adjust x-axis title margin
# Create the plot
p <- ggplot(df_train_sub, aes(x = FactorSpeed, y = TimeToPeck,
group = FactorSpeed)) +
# Stats
stat_summary(fun.data = mean_se, geom = "errorbar", aes(),
width = 0.3,size=1, position = position_dodge(width = 0.3)) +  # Dodge error bars
stat_summary(fun = mean, geom = "point", aes(), size = 4, shape = 21, fill="black",
position = position_dodge(width = 0.3)) +  # Dodge mean points
# Labels and plot customization
labs(title = "",
x = "Wind Turbine Speed (rpm)",
y = "Time to Peck (Seconds)",
color = "Blade Type") +
# Add significance comparisons
geom_signif(
comparisons = list(c("2.5", "0"), c("2.5", "5"), c("0", "5"),
c("5", "10"),c("2.5", "10"), c("0", "10")),
annotations = c("***","***","ns","ns","***","ns"),  # Significance codes
y_position = c(19,22,25,28,31,34),  # Dynamic y-position
textsize = 4,
vjust = 0,
hjust=0.2,
tip_length = c(0.01, 0.01,0.01,0.01,0.01,0.01),
map_signif_level = TRUE  # Automatically map significance levels to symbols
) +
# Custom color scales
scale_alpha_manual(values = c(1, 0.25)) +
scale_fill_manual(values = my_colors) +
scale_color_manual(values = my_colors) +
# Adjust the y-axis to add more space between the bars
scale_y_continuous(expand = expansion(mult = c(0.05, 0.2))) +  # More space at the top
theme_classic() +
theme(legend.position = "none",  # Hide legend
text = element_text(size = 12),
line = element_line(size = 0.6),
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0)))
# Display the plot
print(p)
final_model <- lmer(scale(log(ClickTime)) ~  flash +
(1|PlayerID) + (1|Img),
data = subset(df_clean, Randomized == 1))
anova(final_model)
drop1(final_model, test="Chisq")
final_model <- lmer(log(ClickTime) ~  flash +
(1|PlayerID) + (1|Img),
data = subset(df_clean, Randomized == 1))
anova(final_model)
drop1(final_model, test="Chisq")
final_model <- lmer(log(ClickTime) ~  flash +
(1|PlayerID) + (1|Img),
data = subset(df_clean, Randomized == 0))
anova(final_model)
drop1(final_model, test="Chisq")
final_model <- lmer(log(ClickTime) ~  flash +
(1|PlayerID) + (1|Img),
data = subset(df_clean, Randomized == 1))
anova(final_model)
drop1(final_model, test="Chisq")
final_model <- lmer(log(ClickTime) ~  flash * scale(Lum_JND) +
(1|PlayerID) + (1|Img),
data = subset(df_clean, Randomized == 1))
anova(final_model)
drop1(final_model, test="Chisq")
final_model1 <- lmer(log(ClickTime) ~  flash * scale(Lum_JND) +
(1|PlayerID) + (1|Img),
data = subset(df_clean, Randomized == 1))
anova(final_model1)
final_model2 <- lmer(log(ClickTime) ~  flash + scale(Lum_JND) +
(1|PlayerID) + (1|Img),
data = subset(df_clean, Randomized == 1))
anova(final_model1,final_model2)
final_model1 <- lmer(log(ClickTime) ~  flash + scale(Lum_JND) +
(1|PlayerID) + (1|Img),
data = subset(df_clean, Randomized == 1))
anova(final_model1)
final_model <- lmer(scale(log(ClickTime)) ~
scale(Lum_JND) + scale(EndDistance) + scale(TrialOrder) +
FlightDuration + FlightSpeed.cm.s + flash +
(1|PlayerID) + (1|Img),
data = subset(df_clean, Randomized == 1))
anova(final_model)
drop1(final_model, test="Chisq")
final_model <- lmer(scale(log(ClickTime)) ~
scale(Lum_JND) + scale(EndDistance) + poly(scale(TrialOrder),2) +
FlightDuration + FlightSpeed.cm.s + flash +
(1|PlayerID) + (1|Img),
data = subset(df_clean, Randomized == 1))
anova(final_model)
drop1(final_model, test="Chisq")
final_model <- lmer(scale(log(ClickTime)) ~
scale(Lum_JND) + scale(EndDistance) + poly(scale(TrialOrder),2) +
FlightDuration + FlightSpeed.cm.s + flash +
(1|PlayerID) + (1|Img),
data = subset(df_clean, Randomized == 1))
summary(final_model)
final_model <- lmer(scale(log(ClickTime)) ~  flash +
(1|PlayerID) + (1|Img),
data = subset(df_clean, Randomized == 1))
anova(final_model)
drop1(final_model, test="Chisq")
final_model <- lmer(scale(log(ClickTime)) ~  flash * poly(scale(TrialOrder),2)+
(1|PlayerID) + (1|Img),
data = subset(df_clean, Randomized == 1))
summary(final_model)
p <- ggplot(subset(df_clean, Randomized == 1),  aes(x=EndDistance, y=log(ClickTime), fill=flash, col=flash)) +
geom_smooth (aes(),method=glm,formula=y~poly(x,3),alpha=0.25,size=0.75)
p + theme_classic()+
theme(axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), # Adjust margin for y-axis title
axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0))) # Adjust margin for x-axis title
p <- ggplot(subset(df_clean, Randomized == 1),  aes(x=EndDistance, y=log(ClickTime), fill=flash, col=flash, group=PlayerID)) +
geom_smooth (aes(),method=glm,formula=y~poly(x,3),alpha=0.25,size=0.75)
p + theme_classic()+
theme(axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), # Adjust margin for y-axis title
axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0))) # Adjust margin for x-axis title
p <- ggplot(subset(df_clean, Randomized == 1),  aes(x=EndDistance, y=log(ClickTime), fill=flash, col=flash, group=paste(PlayerID,flash))) +
geom_smooth (aes(),method=glm,formula=y~poly(x,3),alpha=0.25,size=0.75)
p + theme_classic()+
theme(axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), # Adjust margin for y-axis title
axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0))) # Adjust margin for x-axis title
p <- ggplot(subset(df_clean, Randomized == 1),  aes(x=EndDistance, y=log(ClickTime), fill=flash, col=flash, group=paste(PlayerID,flash))) +
geom_smooth (aes(),method=glm,formula=y~poly(x,3),alpha=0,size=0.75)
p + theme_classic()+
theme(axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), # Adjust margin for y-axis title
axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0))) # Adjust margin for x-axis title
p <- ggplot(subset(df_clean, Randomized == 1),  aes(x=EndDistance, y=log(ClickTime), fill=flash, col=flash, group=paste(PlayerID,flash))) +
geom_smooth (aes(),method=glm,formula=y~poly(x,1),alpha=0,size=0.75)
p + theme_classic()+
theme(axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), # Adjust margin for y-axis title
axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0))) # Adjust margin for x-axis title
p <- ggplot(subset(df_clean, Randomized == 1),  aes(x=EndDistance, y=log(ClickTime), fill=flash, col=flash)) +
facet_grid(. ~ as.factor(PlayerID))+
geom_smooth (aes(),method=glm,formula=y~poly(x,1),alpha=0,size=0.75)
p + theme_classic()+
theme(axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), # Adjust margin for y-axis title
axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0))) # Adjust margin for x-axis title
p <- ggplot(subset(df_clean, Randomized == 1 & playerID<70),  aes(x=EndDistance, y=log(ClickTime), fill=flash, col=flash)) +
facet_grid(. ~ as.factor(PlayerID))+
geom_smooth (aes(),method=glm,formula=y~poly(x,1),alpha=0,size=0.75)
p <- ggplot(subset(df_clean, Randomized == 1 & PlayerID<70),  aes(x=EndDistance, y=log(ClickTime), fill=flash, col=flash)) +
facet_grid(. ~ as.factor(PlayerID))+
geom_smooth (aes(),method=glm,formula=y~poly(x,1),alpha=0,size=0.75)
p + theme_classic()+
theme(axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), # Adjust margin for y-axis title
axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0))) # Adjust margin for x-axis title
p <- ggplot(subset(df_clean, Randomized == 1 & PlayerID<80),  aes(x=EndDistance, y=log(ClickTime), fill=flash, col=flash)) +
facet_grid(. ~ as.factor(PlayerID))+
geom_smooth (aes(),method=glm,formula=y~poly(x,1),alpha=0,size=0.75)
p + theme_classic()+
theme(axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), # Adjust margin for y-axis title
axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0))) # Adjust margin for x-axis title
p <- ggplot(subset(df_clean, Randomized == 1 & PlayerID<90),  aes(x=EndDistance, y=log(ClickTime), fill=flash, col=flash)) +
facet_grid(. ~ as.factor(PlayerID))+
geom_smooth (aes(),method=glm,formula=y~poly(x,1),alpha=0,size=0.75)
p + theme_classic()+
theme(axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), # Adjust margin for y-axis title
axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0))) # Adjust margin for x-axis title
p <- ggplot(subset(df_clean, Randomized == 1 && PlayerID<90),  aes(x=EndDistance, y=log(ClickTime), fill=flash, col=flash)) +
facet_grid(. ~ as.factor(PlayerID))+
geom_smooth (aes(),method=glm,formula=y~poly(x,1),alpha=0,size=0.75)
p <- ggplot(subset(df_clean, Randomized == 1 & PlayerID<90),  aes(x=EndDistance, y=log(ClickTime), fill=flash, col=flash)) +
facet_grid(. ~ as.factor(PlayerID))+
geom_smooth (aes(),method=glm,formula=y~poly(x,1),alpha=0,size=0.75)
p + theme_classic()+
theme(axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), # Adjust margin for y-axis title
axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0))) # Adjust margin for x-axis title
p <- ggplot(subset(df_clean, Randomized == 1 ),  aes(x=EndDistance, y=log(ClickTime), fill=flash, col=flash)) +
facet_grid(. ~ as.factor(PlayerID))+
geom_smooth (aes(),method=glm,formula=y~poly(x,1),alpha=0,size=0.75)
p + theme_classic()+
theme(axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), # Adjust margin for y-axis title
axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0))) # Adjust margin for x-axis title
p <- ggplot(subset(df_clean, PlayerID<70 ),  aes(x=EndDistance, y=log(ClickTime), fill=flash, col=flash)) +
facet_grid(. ~ as.factor(PlayerID))+
geom_smooth (aes(),method=glm,formula=y~poly(x,1),alpha=0,size=0.75)
p + theme_classic()+
theme(axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), # Adjust margin for y-axis title
axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0))) # Adjust margin for x-axis title
p <- ggplot(subset(df_clean, PlayerID<70 & playerID>60),  aes(x=EndDistance, y=log(ClickTime), fill=flash, col=flash)) +
facet_grid(. ~ as.factor(PlayerID))+
geom_smooth (aes(),method=glm,formula=y~poly(x,1),alpha=0,size=0.75)
p <- ggplot(subset(df_clean, PlayerID<70 & playerID>60),  aes(x=EndDistance, y=log(ClickTime), fill=flash, col=flash)) +
geom_smooth (aes(),method=glm,formula=y~poly(x,1),alpha=0,size=0.75)
p <- ggplot(subset(df_clean, PlayerID<70 & PlayerID>60),  aes(x=EndDistance, y=log(ClickTime), fill=flash, col=flash)) +
geom_smooth (aes(),method=glm,formula=y~poly(x,1),alpha=0,size=0.75)
p + theme_classic()+
theme(axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), # Adjust margin for y-axis title
axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0))) # Adjust margin for x-axis title
PlayerID=as.numeric(PlayerID)
p <- ggplot(subset(df_clean, PlayerID<70 & PlayerID>60),  aes(x=EndDistance, y=log(ClickTime), fill=flash, col=flash)) +
geom_smooth (aes(),method=glm,formula=y~poly(x,1),alpha=0,size=0.75)
p + theme_classic()+
theme(axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), # Adjust margin for y-axis title
axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0))) # Adjust margin for x-axis title
df$PlayerIDN=as.numeric(PlayerID)
df_clean$PlayerIDN=as.numeric(PlayerID)
p <- ggplot(subset(df_clean, PlayerIDN<70 & PlayerIDN>60),  aes(x=EndDistance, y=log(ClickTime), fill=flash, col=flash)) +
geom_smooth (aes(),method=glm,formula=y~poly(x,1),alpha=0,size=0.75)
p + theme_classic()+
theme(axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), # Adjust margin for y-axis title
axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0))) # Adjust margin for x-axis title
p <- ggplot(subset(df_clean, Randomised==1),  aes(x=EndDistance, y=log(ClickTime), fill=flash, col=flash)) +
geom_smooth (aes(),method=glm,formula=y~poly(x,1),alpha=0,size=0.75)
p <- ggplot(subset(df_clean, Randomized==1),  aes(x=EndDistance, y=log(ClickTime), fill=flash, col=flash)) +
geom_smooth (aes(),method=glm,formula=y~poly(x,1),alpha=0,size=0.75)
p + theme_classic()+
theme(axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), # Adjust margin for y-axis title
axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0))) # Adjust margin for x-axis title
p <- ggplot(subset(df_clean),  aes(x=EndDistance, y=log(ClickTime), fill=flash, col=flash)) +
facet_grid(. ~ as.factor(PlayerID))+
geom_smooth (aes(),method=glm,formula=y~poly(x,1),alpha=0,size=0.75)
p + theme_classic()+
theme(axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), # Adjust margin for y-axis title
axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0))) # Adjust margin for x-axis title
p <- ggplot(subset(df_clean),  aes(x=PlayerID, y=log(ClickTime), fill=flash, col=flash)) +
geom_boxplot()
p + theme_classic()+
theme(axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), # Adjust margin for y-axis title
axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0))) # Adjust margin for x-axis title
p <- ggplot(subset(df_clean),  aes(x=PlayerID, y=log(ClickTime), fill=flash, col=flash)) +
stat_summary(fun = mean, geom = "point", size = 4, shape = 21)
p + theme_classic()+
theme(axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), # Adjust margin for y-axis title
axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0))) # Adjust margin for x-axis title
p <- ggplot(subset(df_clean),  aes(x=PlayerID, y=log(ClickTime), fill=flash, col=flash)) +
stat_summary(fun = mean, geom = "point", size = 2, shape = 21)
p + theme_classic()+
theme(axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), # Adjust margin for y-axis title
axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0))) # Adjust margin for x-axis title
p <- ggplot(subset(df_clean),  aes(x=PlayerID, y=log(ClickTime), fill=flash, col=flash)) +
stat_summary(fun = mean, geom = "point", size = 3, shape = 21)
p + theme_classic()+
theme(axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), # Adjust margin for y-axis title
axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0))) # Adjust margin for x-axis title
p <- ggplot(subset(df_clean, Randomized==1),  aes(x=PlayerID, y=log(ClickTime), fill=flash, col=flash)) +
stat_summary(fun = mean, geom = "point", size = 3, shape = 21)
p + theme_classic()+
theme(axis.title.y = element_text(margin = margin(t = 0, r = 20, b = 0, l = 0)), # Adjust margin for y-axis title
axis.title.x = element_text(margin = margin(t = 20, r = 0, b = 0, l = 0))) # Adjust margin for x-axis title
